import java.text.SimpleDateFormat

buildscript {
    repositories {
        maven { url "https://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://maven.aliyun.com/nexus/content/repositories/gradle-plugin" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        //noinspection DifferentKotlinGradleVersion
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72'
        classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.15.0"
    }
}

allprojects {
    group = 'com.opcooc'
    version = "1.0.0"
}

description = "opcooc-storage - 简化第三方对象存储操作"

subprojects {

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'signing'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.hierynomus.license'
    
    sourceCompatibility = project.javaSourceCompatibility
    targetCompatibility = project.javaTargetCompatibility

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.warnings = false
        options.deprecation = true
        options.compilerArgs += ["-parameters"]
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    jar {
        afterEvaluate {
            manifest {
                attributes 'Implementation-Version': archiveVersion
                attributes 'Built-Gradle': gradle.gradleVersion
                attributes 'Bundle-DocURL': 'http://www.opcooc.com/'
                attributes 'Build-OS': System.getProperty("os.name")
                attributes 'Built-By': System.getProperty("user.name")
                attributes 'Build-Jdk': System.getProperty("java.version")
                attributes 'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())
            }
        }
    }

    license {
        encoding = "UTF-8"
        header = rootProject.file("license.txt")
        includes(["**/*.java"])
        exclude "**/test/**/*.java"
        exclude "**/*Test.java"
        mapping "java", "SLASHSTAR_STYLE"
        ignoreFailures = true
    }

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        testCompileOnly 'org.projectlombok:lombok:1.18.12'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

        implementation 'org.springframework.boot:spring-boot-starter-aop:2.3.3.RELEASE'

        implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.2'
        implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.11.2'

        implementation 'commons-codec:commons-codec:1.14'
        implementation 'commons-logging:commons-logging:1.2'

        implementation 'net.bytebuddy:byte-buddy:1.10.14'
        testImplementation 'net.bytebuddy:byte-buddy-agent:1.10.14'

        implementation 'org.apache.httpcomponents:httpclient:4.5.12'
        implementation 'org.slf4j:slf4j-api:1.7.30'
        implementation "cn.hutool:hutool-core:5.2.1"

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
        testImplementation 'org.mockito:mockito-junit-jupiter:3.5.7'
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    javadoc {
        afterEvaluate {
            configure(options) {
                encoding "UTF-8"
                charSet 'UTF-8'
                author true
                version true
                failOnError false
                links "http://docs.oracle.com/javase/8/docs/api"
            }
        }
    }

    test {
        dependsOn("cleanTest", "generatePomFileForMavenJavaPublication")
        useJUnitPlatform()
        exclude("**/storage/**")
    }

    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }


    tasks.whenTaskAdded { task ->
        if (task.name.contains('signMavenJavaPublication')) {
            task.enabled = new File(project.property('signing.secretKeyRingFile') as String).isFile()
        }
    }

    publishing {

        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username project.sonatypeUsername
                    password project.sonatypePassword
                }
            }
        }

        publications {

            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = "opcooc-storage"
                    packaging 'jar'
                    description = 'opcooc-storage simple object storage client'
                    url = 'https://github.com/opcooc/opcooc-storage'

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'opcooc'
                            name = 'shenqicheng'
                            email = '1317225796@qq.com'
                        }
                    }

                    scm {
                        url = 'https://github.com/opcooc/opcooc-storage'
                        connection = 'scm:git:https://github.com/opcooc/opcooc-storage'
                        developerConnection = 'scm:git:git@github.com:opcooc/opcooc-storage.git'
                    }

                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}